import java.util.*;
class Node{
    int data;
    Node left;
    Node right;
    Node(int data){
        this.data=data;
        this.right=null;
        this.left=null;
    }
    Node(){}
}
public class Binarytree {
    
    public static void preorder(Node cur){
        if (cur==null){
            return;
        }
        System.out.println(cur.data);
        preorder(cur.left);
        preorder(cur.right);
    }
    public static List<Integer> levelorder(Node root){
        Queue<Node> queue=new LinkedList<Node>();
        List<Integer> l= new ArrayList<Integer>();
        if (root==null){
            return l;
        }
        queue.offer(root);
        while(!queue.isEmpty()){
            if (queue.peek().right!=null){
                queue.offer(queue.peek().right);
            }
            if (queue.peek().left!=null){
                queue.offer(queue.peek().left);
            }
            l.add(queue.poll().data);
        }
        return l;
    }
    public static void main(String[] args) {
        Node root=new Node(1);
        root.right=new Node(3);
        root.left=new Node(2);
        // preorder(root);
        List<Integer> l=levelorder(root);
        for (int i=0;i<l.size();i++){
            System.out.print(l.get(i));
        }
    }
}
